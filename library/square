unsigned long long __modnumber;
bool __mod = 0;

template<typename T>
struct t{
    vector<vector<T>>f;
    t(vector<vector<T>>&v) {
        f = move(v);
    }

    t(T n) {
        f.resize(n,vector<T>(n));
    }
    
    inline void mod(unsigned long long n) {
        __mod = 1;
        __modnumber = n;
        return;
    }

    inline t operator*(t x) {
        T n = x.f.size();
        t tmp = t(n);
        for(T i = 0;i<n;i++) {
            for(T j = 0;j<n;j++) {
                for(T k = 0;k < n;k++) {
                    tmp.f.at(i).at(j) += f.at(i).at(k) * x.f.at(k).at(j);
                    if(__mod) tmp.f.at(i).at(j) = tmp.f.at(i).at(j) % __modnumber;
                    // [2][3] ==> [2][0] * [0][3] + [2][1] * [1][3] + ...
                }
            }
        }
        return tmp;
    }

    inline void input(T n) {
        f.resize(n,vector<T>(n));
        for(T i = 0;i<n;i++) {
            for(T j = 0;j<n;j++) {
                cin>>f.at(i).at(j);
            }
        }
        return;
    }

    inline void print() {
        T n = f.size();
        for(T i = 0;i<n;i++) {
            for(T j = 0;j<n;j++) {
                cout<<f.at(i).at(j)<<" ";
            }
            cout<<"\n";
        }
        return;
    }

    inline t operator^(T k) {
        if(k == 1) return *this;
        t t = *this ^ (k >> 1);
        t = t * t;
        if(k & 1) {
            t = t * *this;
        }
        return t;
    }
};