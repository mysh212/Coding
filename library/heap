
template<typename T>
struct node{
    node<T> *left, *right;
    T n;
    int _size;

    node(T n, node* left = nullptr, node* right = nullptr,int _size = 1):
        n(n), left(left), right(right), _size(_size) {};
};

template<typename T, typename _cp = std::greater<T>>
struct heap{
    node<T>* root;
    int _size;
    _cp cp;

    heap(node<T> *root = nullptr):
        root(root), _size(get__size(root)) {};

    int get__size(node<T> *root) {
        if(!root) return 0;
        return (root->_size = get__size(root->left) + get__size(root->right) + 1);
    }

    void push(T x, node<T>* &root) {
        if(!root) return root = new node<T>(x), void();

        root -> _size++;

        int l = (root -> left ? root -> left -> _size : 0);
        int r = (root -> right ? root -> right -> _size : 0);

        node<T>* ans = nullptr;

        if(l <= r) push(x, root -> left), ans = root -> left;
        else push(x, root -> right), ans = root -> right;

        if(cp(root -> n, ans -> n)) swap(root -> n, ans -> n);
    }
    void push(T x) {_size++; return push(x, root);}

    inline bool empty() {
        return !root;
    }

    bool pop(node<T> *root) {
        if(!root -> left and !root -> right) {
            return delete root, 1;
        }
        if(!root -> left and root -> right) swap(root -> left, root -> right);
        if(!root -> right) {
            swap(root -> left -> n, root -> n);
            if(pop(root -> left)) root -> left = nullptr;
            return 0;
        }
        T l = root -> left -> n;
        T r = root -> right -> n;
        if(!cp(l, r)) {
            swap(root -> left -> n, root -> n);
            if(pop(root -> left)) root -> left = nullptr;
        } else {
            swap(root -> right -> n, root -> n);
            if(pop(root -> right)) root -> right = nullptr;
        }
        return 0;
    }
    void pop() {assert(!empty()); _size--; return (_size == 0 ? delete root, root = nullptr, true : pop(root)), void();}

    void print(node<T>* root, std::ostream& out) {
        if(!root) return;

        out<<root -> n<<", [";
        print(root -> left, out);
        out<<"], [";
        print(root -> right, out);
        out<<"]";
        
        return;
    }
    void print(std::ostream& out = std::cout) {out<<"["; return print(root, out),out<<"]\n",void();}

    inline int size() {
        return _size;
    }

    inline T top() {
        return root -> n;
    }

    friend std::ostream& operator<<(std::ostream& out, heap<T>x) {
        x.print(out);
        return out;
    }
};